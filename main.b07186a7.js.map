{"version":3,"sources":["scripts/main.js"],"names":["resolver1","resolve","reject","document","addEventListener","setTimeout","resolver2","e","preventDefault","button","resolver3","countLeft","countRight","makeDom","eventType","textContent","notification","createElement","setAttribute","pageBody","querySelector","classList","add","innerHTML","append","promise1","Promise","promise2","promise3","then","result","catch"],"mappings":";AAAA,aAEA,IAAMA,EAAY,SAACC,EAASC,GAC1BC,SAASC,iBAAiB,QAAS,WAC1BH,OAAAA,EAAQ,gCAGjBI,WAAW,WACFH,OAAAA,EAAO,+BACb,MAGCI,EAAY,SAACL,GAKjBE,SAASC,iBAAiB,QAAS,WAC1BH,OAAAA,EAAQ,iCAGjBE,SAASC,iBAAiB,cAAe,SAACG,GAGpCA,GAFJA,EAAEC,iBAEe,IAAbD,EAAEE,OACGR,OAAAA,EAAQ,kCAKfS,EAAY,SAACT,GACbU,IAAAA,EAAY,EACZC,EAAa,EAEjBT,SAASC,iBAAiB,QAAS,WAG7BO,KAFJA,EAEgB,GAAKC,EAAa,EACzBX,OAAAA,EAAQ,gCAInBE,SAASC,iBAAiB,cAAe,SAACG,GAGpCA,GAFJA,EAAEC,iBAEe,IAAbD,EAAEE,OAMFE,OALFC,IAKED,EAAY,GAAKC,EAAa,EACzBX,EAAQ,mCADbU,KAMR,SAASE,EAAQC,EAAWC,GACpBC,IAAAA,EAAeb,SAASc,cAAc,OAE5CD,EAAaE,aAAa,UAAW,gBAE/BC,IAAAA,EAAWhB,SAASiB,cAAc,QAEhCN,OAAAA,GACD,IAAA,UACHE,EAAaK,UAAUC,IAAI,WAC3BN,EAAaO,UAAYR,EACzB,MAEG,IAAA,QACHC,EAAaK,UAAUC,IAAI,SAC3BN,EAAaO,UAAYR,EAI7BI,EAASK,OAAOR,GAGlB,IAAMS,EAAW,IAAIC,QAAQ1B,GACvB2B,EAAW,IAAID,QAAQpB,GACvBsB,EAAW,IAAIF,QAAQhB,GAK7Be,EAASI,KAAK,SAAAC,GACZjB,EAAQ,UAAWiB,KAClBC,MAAM,SAAAD,GACPjB,EAAQ,QAASiB,KAGnBH,EAASE,KAAK,SAAAC,GACZjB,EAAQ,UAAWiB,KAClBC,MAAM,SAAAD,GACPjB,EAAQ,QAASiB,KAGnBF,EAASC,KAAK,SAAAC,GACZjB,EAAQ,UAAWiB,KAClBC,MAAM,SAAAD,GACPjB,EAAQ,QAASiB","file":"main.b07186a7.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst resolver1 = (resolve, reject) => {\n  document.addEventListener('click', () => {\n    return resolve('First promise was resolved');\n  });\n\n  setTimeout(() => {\n    return reject('First promise was rejected');\n  }, 3000);\n};\n\nconst resolver2 = (resolve) => {\n  // we could use mouseup event instead of click here\n  // and add only one addEventListener\n  // but it would appear before promise1 in such case\n\n  document.addEventListener('click', () => {\n    return resolve('Second promise was resolved');\n  });\n\n  document.addEventListener('contextmenu', (e) => {\n    e.preventDefault();\n\n    if (e.button === 2) {\n      return resolve('Second promise was resolved');\n    };\n  });\n};\n\nconst resolver3 = (resolve) => {\n  let countLeft = 0;\n  let countRight = 0;\n\n  document.addEventListener('click', () => {\n    countLeft++;\n\n    if (countLeft > 0 && countRight > 0) {\n      return resolve('Third promise was resolved');\n    }\n  });\n\n  document.addEventListener('contextmenu', (e) => {\n    e.preventDefault();\n\n    if (e.button === 2) {\n      countRight++;\n    } else {\n      return;\n    }\n\n    if (countLeft > 0 && countRight > 0) {\n      return resolve('Third promise was resolved');\n    }\n  });\n};\n\nfunction makeDom(eventType, textContent) {\n  const notification = document.createElement('div');\n\n  notification.setAttribute('data-qa', 'notification');\n\n  const pageBody = document.querySelector('body');\n\n  switch (eventType) {\n    case 'success':\n      notification.classList.add('success');\n      notification.innerHTML = textContent;\n      break;\n\n    case 'error':\n      notification.classList.add('error');\n      notification.innerHTML = textContent;\n      break;\n  }\n\n  pageBody.append(notification);\n}\n\nconst promise1 = new Promise(resolver1);\nconst promise2 = new Promise(resolver2);\nconst promise3 = new Promise(resolver3);\n\n// catches were added to all promises for more common usage\n// in this task only it is needed only once\n\npromise1.then(result => {\n  makeDom('success', result);\n}).catch(result => {\n  makeDom('error', result);\n});\n\npromise2.then(result => {\n  makeDom('success', result);\n}).catch(result => {\n  makeDom('error', result);\n});\n\npromise3.then(result => {\n  makeDom('success', result);\n}).catch(result => {\n  makeDom('error', result);\n});\n"]}